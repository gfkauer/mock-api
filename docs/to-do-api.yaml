openapi: 3.0.0
info:
  description: |
    This is a basic documentation for future implementation
  version: "0.0.1"
  title: to-do API
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: gfkauer@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  - description: API Auto Mocking
    url: https://virtserver.swaggerhub.com/gfkauer/simpleTask/1.0.0
  - description: Sandbox server
    url: "https://petstore.swagger.io/v1"
tags:
  - name: task
    description: Everything about tasks
    externalDocs:
      description: Find out more
      url: "http://swagger.io"
  - name: project
    description: Everything about projects
    externalDocs:
      description: Find out more
      url: "http://swagger.io"
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: "http://swagger.io"
paths:
  /task:
    post:
      tags:
        - task
      summary: Add a new task
      operationId: addTask
      requestBody:
        $ref: "#/components/requestBodies/TaskRB"
      responses:
        "200":
          $ref: "#/components/responses/200Task"
        "400":
          $ref: "#/components/responses/badRequest"
      security:
        - api_key: []
    put:
      tags:
        - task
      summary: Updating an existing task
      operationId: updateTask
      requestBody:
        $ref: "#/components/requestBodies/TaskRB"
      responses:
        "200":
          $ref: "#/components/responses/200Task"
        "400":
          $ref: "#/components/responses/badRequest"
        "404":
          $ref: "#/components/responses/noDataFound"
      security:
        - api_key: []
  /task/find:
    get:
      tags:
        - task
      summary: Finds Tasks by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findTasksByStatus
      parameters:
        - $ref: "#/components/parameters/taskStatus"
      responses:
        "200":
          $ref: "#/components/responses/listOfTasks"
        "404":
          $ref: "#/components/responses/noDataFound"
      security:
        - api_key: []
  "/task/{id}":
    get:
      tags:
        - task
      summary: Find the task by ID
      description: Returns a single task
      operationId: getTaskById
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          $ref: "#/components/responses/200Task"
        "404":
          $ref: "#/components/responses/noDataFound"
    delete:
      tags:
        - task
      summary: Delete a task by ID
      operationId: deleteTaskById
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          $ref: "#/components/responses/http200"
        "404":
          $ref: "#/components/responses/noDataFound"
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  "/user/{username}":
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "404":
          $ref: "#/components/responses/noDataFound"
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "400":
          description: Invalid user supplied
        "404":
          $ref: "#/components/responses/noDataFound"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: "http://swagger.io"
components:
  schemas:
    Task:
      type: object
      required:
        - title
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        title:
          type: string
        description:
          type: string
        dueDate:
          type: string
          format: date-time
        project:
          $ref: "#/components/schemas/ProjectRead"
        projectId:
          type: integer
          format: int64
          writeOnly: true
        status:
          type: string
          enum:
            - active
            - resolved
            - cancelled
    Project:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        description:
          type: string
        status:
          type: string
          enum:
            - active
            - arquived
            - closed
    ProjectRead:
      allOf:
        - $ref: "#/components/schemas/Project"
        - readOnly: true
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
          writeOnly: true
        tier:
          type: string
          enum:
            - free
            - paid
            - admin
        userStatus:
          type: integer
          format: int32
          description: User Status
  requestBodies:
    TaskRB:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Task"
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
      description: List of user object
      required: true
  parameters:
    id:
      name: id
      in: path
      description: ID of the request
      required: true
      schema:
        type: integer
        format: int64
    status:
      name: status
      in: query
      description: Status values that need to be considered for filter
      explode: false
      schema:
        type: array
        items:
          type: string
    taskStatus:
      name: status
      in: query
      description: Status values that need to be considered for filter
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - active
            - resolved
            - cancelled
    username:
      name: username
      in: path
      description: Username for execute the operation
      required: true
      schema:
        type: string
  responses:
    listOfTasks: # http 200
      description: Successful operation
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Task"
    200Task: # http 200
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Task"
    http200: # http 200
      description: Successful operation
    badRequest: # http 400
      description: Bad Request
    noDataFound: # http 404
      description: No data found
    methodNotAllowed: # http 405
      description: Method Not Allowed
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
